% import re
% floatsRE = 'Double|Float|Float80'
/*
    AtomicTypes.swift

    Copyright (c) 2017, 2018 Stephen Whittle  All rights reserved.

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom
    the Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
    IN THE SOFTWARE.
*/
% for type in ['Int', 'Int8', 'Int16', 'Int32', 'Int64', 'UInt', 'UInt8', 'UInt16', 'UInt32', 'UInt64', 'Double', 'Float', 'Float80']:

// typealias for atomic '${type}'
public typealias Atomic${type} = Atomic<${type}>
    % for operator in ['+', '-', '*', '/', '%', '<<', '>>', '^', '|', '&', '&+', '&-', '&*']:
        % if not (re.search(floatsRE, type) and re.search('%|<<|>>|\^|\||&|&\+|&-|&\*', operator)):

public func ${operator}(lhs: Atomic${type}, rhs: Atomic${type}) -> Atomic${type} {
    return Atomic(lhs.value ${operator} rhs.value)
}

public func ${operator}(lhs: ${type}, rhs: Atomic${type}) -> Atomic${type} {
    return Atomic(lhs ${operator} rhs.value)
}

public func ${operator}(lhs: Atomic${type}, rhs: ${type}) -> Atomic${type} {
    return Atomic(lhs.value ${operator} rhs)
}
        % end
    % end
    % for operator in ['+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '^=', '|=', '&=']:
        % if not (re.search(floatsRE, type) and re.search('%=|<<=|>>=|\^=|\|=|\&=', operator)):

public func ${operator}(lhs: inout Atomic${type}, rhs: Atomic${type}) {
    lhs.value ${operator} rhs.value
}

public func ${operator}(lhs: inout ${type}, rhs: Atomic${type}) {
    lhs ${operator} rhs.value
}

public func ${operator}(lhs: inout Atomic${type}, rhs: ${type}) {
    lhs.value ${operator} rhs
}
        % end
    % end
    % if not (re.search('UInt*', type)):
        % for prefix in ['+', '-', '~']:
            % if not (re.search(floatsRE, type) and prefix == '~'):

public prefix func ${prefix}(x: Atomic${type}) -> Atomic${type} {
    return Atomic(${prefix}x.value)
}
            % end
        % end
    % end
% end

// Atomic typealias for 'String'
public typealias AtomicString = Atomic<String>

public func +(lhs: AtomicString, rhs: AtomicString) -> AtomicString {
    return Atomic(lhs.value + rhs.value)
}

public func +(lhs: String, rhs: AtomicString) -> AtomicString {
    return Atomic(lhs + rhs.value)
}

public func +(lhs: AtomicString, rhs: String) -> AtomicString {
    return Atomic(lhs.value + rhs)
}

public func +=(lhs: inout AtomicString, rhs: AtomicString) {
    lhs.value += rhs.value
}

public func +=(lhs: inout String, rhs: AtomicString) {
    lhs += rhs.value
}

public func +=(lhs: inout AtomicString, rhs: String) {
    lhs.value += rhs
}

// Atomic typealias for 'Bool'
public typealias AtomicBool = Atomic<Bool>
% for operator in ['&&', '||']:

public func ${operator}(lhs: AtomicBool, rhs: AtomicBool) -> Bool {
    return (lhs.value ${operator} rhs.value)
}
% end

public prefix func !(x: AtomicBool) -> AtomicBool {
    return Atomic(!x.value)
}
% for type in ['Character', 'UnicodeScalar']:

// Atomic typealias for '${type}'
public typealias Atomic${type} = Atomic<${type}>
% end

// Atomic typealias for 'C' types
% for ctype in ['CBool', 'CChar', 'CChar16', 'CChar32', 'CDouble', 'CFloat', 'CInt', 'CLong', 'CLongLong', 'CShort', 'CSignedChar', 'CUnsignedChar', 'CUnsignedInt', 'CUnsignedLong', 'CUnsignedLongLong', 'CUnsignedShort', 'CWideChar']:
public typealias Atomic${ctype} = Atomic<${ctype}>
% end
